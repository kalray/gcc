/*
 * FIXME AUTO: part of HAL duplicated here for coolidge
 */

#define _COS_SFR_CS 8 // Compute Status $cs $s8
#define _COS_MASK_CS_IO 0x2 // IEEE 754 Invalid Operation
#define _COS_MASK_CS_DZ 0x4 // IEEE 754 Divide by Zero
#define _COS_MASK_CS_OV 0x8 // IEEE 754 Overflow
#define _COS_MASK_CS_UN 0x10 // IEEE 754 Underflow
#define _COS_MASK_CS_IN 0x20 // IEEE 754 Inexact
#define _COS_MASK_CS_RM 0x300 // IEEE 754 Rounding Mode

enum __cos_fpu_rounding_mode {
  _COS_FPU_NEAREST_EVEN        = 0,
  _COS_FPU_TOWARDS_PLUS_INF    = 1,
  _COS_FPU_TOWARDS_MINUS_INF   = 2,
  _COS_FPU_TOWARDS_ZERO        = 3
};
enum __cos_fpu_rounding_mode __cos_fpu_get_rounding_mode(void);

/**
 * \enum cos_fpu_exceptions
 * \brief Exceptions generated by K1's FPU.
 */
enum __cos_fpu_exceptions {
  _COS_FPU_INVALID_OPERATION   = _COS_MASK_CS_IO,
  _COS_FPU_DIVIDE_BY_ZERO      = _COS_MASK_CS_DZ,
  _COS_FPU_OVERFLOW            = _COS_MASK_CS_OV,
  _COS_FPU_UNDERFLOW           = _COS_MASK_CS_UN,
  _COS_FPU_INEXACT             = _COS_MASK_CS_IN,
  _COS_FPU_ALL_EXCEPTS         = _COS_MASK_CS_IO | _COS_MASK_CS_DZ | _COS_MASK_CS_OV | _COS_MASK_CS_UN | _COS_MASK_CS_IN
};

void __cos_fpu_raise_exceptions(int except);

#define FP_HANDLE_EXCEPTIONS						\
  do {									\
        __cos_fpu_raise_exceptions (_fex);				\
  } while (0)

#define FP_RND_NEAREST		_COS_FPU_NEAREST_EVEN
#define FP_RND_ZERO		    _COS_FPU_TOWARDS_ZERO
#define FP_RND_PINF		    _COS_FPU_TOWARDS_PLUS_INF
#define FP_RND_MINF		    _COS_FPU_TOWARDS_MINUS_INF

#define FP_INIT_ROUNDMODE			\
  do {						\
  _rm = __cos_fpu_get_rounding_mode ();          \
  } while (0)


