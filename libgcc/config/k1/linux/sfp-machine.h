/*
 * FIXME AUTO: part of HAL duplicated here for coolidge
 */

#define _K1_SFR_CS 4 // Compute Status $cs $s8
#define _K1_MASK_CS_IO 0x2 // IEEE 754 Invalid Operation
#define _K1_MASK_CS_DZ 0x4 // IEEE 754 Divide by Zero
#define _K1_MASK_CS_OV 0x8 // IEEE 754 Overflow
#define _K1_MASK_CS_UN 0x10 // IEEE 754 Underflow
#define _K1_MASK_CS_IN 0x20 // IEEE 754 Inexact
#define _K1_MASK_CS_RM 0x300 // IEEE 754 Rounding Mode

enum __k1_fpu_rounding_mode {
	_K1_FPU_NEAREST_EVEN        = 0,
	_K1_FPU_TOWARDS_PLUS_INF    = 1,
	_K1_FPU_TOWARDS_MINUS_INF   = 2,
	_K1_FPU_TOWARDS_ZERO        = 3
};
enum __k1_fpu_rounding_mode __k1_fpu_get_rounding_mode(void);

/**
 * \enum __k1_fpu_exceptions
 * \brief Exceptions generated by K1's FPU.
 */
enum __k1_fpu_exceptions {
	_K1_FPU_INVALID_OPERATION   = _K1_MASK_CS_IO,
	_K1_FPU_DIVIDE_BY_ZERO      = _K1_MASK_CS_DZ,
	_K1_FPU_OVERFLOW            = _K1_MASK_CS_OV,
	_K1_FPU_UNDERFLOW           = _K1_MASK_CS_UN,
	_K1_FPU_INEXACT             = _K1_MASK_CS_IN,
	_K1_FPU_ALL_EXCEPTS         = _K1_MASK_CS_IO | _K1_MASK_CS_DZ | _K1_MASK_CS_OV | _K1_MASK_CS_UN | _K1_MASK_CS_IN
};

/*
 * End of part of HAL duplicated here for coolidge
 */

#define FP_EX_INVALID		_K1_FPU_INVALID_OPERATION
#define FP_EX_DIVZERO		_K1_FPU_DIVIDE_BY_ZERO
#define FP_EX_OVERFLOW		_K1_FPU_OVERFLOW
#define FP_EX_UNDERFLOW		_K1_FPU_UNDERFLOW
#define FP_EX_INEXACT		_K1_FPU_INEXACT

#define FP_HANDLE_EXCEPTIONS						\
  do {									\
    __builtin_k1_wfxl(_K1_SFR_CS, (long long)(_fex & _K1_FPU_ALL_EXCEPTS) << 32); \
  } while (0)

#define FP_RND_NEAREST		_K1_FPU_NEAREST_EVEN
#define FP_RND_ZERO		_K1_FPU_TOWARDS_ZERO
#define FP_RND_PINF		_K1_FPU_TOWARDS_PLUS_INF
#define FP_RND_MINF		_K1_FPU_TOWARDS_MINUS_INF

#define FP_INIT_ROUNDMODE						\
  do {									\
  int offset = __builtin_ctz (_K1_MASK_CS_RM);			\
  _rm = (enum __k1_fpu_rounding_mode)((__builtin_k1_get (_K1_SFR_CS) & _K1_MASK_CS_RM) >> offset); \
} while (0)
