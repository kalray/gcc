/* Definitions of target machine for GNU compiler for Kalray MPPA.
   Copyright (C) 2009-2014 Kalray SA.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING3.  If not see
<http://www.gnu.org/licenses/>.  */

INT_MODE (OI, 32);
FLOAT_MODE (HF, 2, 0);
ADJUST_FLOAT_FORMAT (HF, &ieee_half_format);
COMPLEX_MODES (INT);
COMPLEX_MODES (FLOAT);

VECTOR_MODE (INT, QI, 8);          /* V8QI */
VECTOR_MODE (INT, QI, 16);         /* V16QI */
VECTOR_MODE (INT, QI, 32);         /* V32QI */
VECTOR_MODE (INT, QI, 64);         /* V64QI */
VECTOR_MODE (INT, HI, 4);          /* V4HI */
VECTOR_MODE (INT, HI, 8);          /* V8HI */
VECTOR_MODE (INT, HI, 16);         /* V16HI */
VECTOR_MODE (INT, HI, 32);         /* V32HI */
VECTOR_MODE (INT, SI, 2);          /* V2SI */
VECTOR_MODE (INT, SI, 4);          /* V4SI */
VECTOR_MODE (INT, SI, 8);          /* V8SI */
VECTOR_MODE (INT, SI, 16);         /* V16SI */

VECTOR_MODE (FLOAT, HF, 4);        /* V4HF */
VECTOR_MODE (FLOAT, HF, 8);        /* V8HF */
VECTOR_MODE (FLOAT, HF, 16);       /* V16HF */
VECTOR_MODE (FLOAT, HF, 32);       /* V32HF */
VECTOR_MODE (FLOAT, SF, 2);        /* V2SF */
VECTOR_MODE (FLOAT, SF, 4);        /* V4SF */
VECTOR_MODE (FLOAT, SF, 8);        /* V8SF */
VECTOR_MODE (FLOAT, SF, 16);       /* V16SF */
VECTOR_MODE (FLOAT, DF, 2);        /* V2DF */
VECTOR_MODE (FLOAT, DF, 4);        /* V4DF */
VECTOR_MODE (FLOAT, DF, 8);        /* V8DF */

VECTOR_MODE (COMPLEX_INT, CQI, 4); /* V4CQI */
VECTOR_MODE (COMPLEX_INT, CQI, 8); /* V8CQI */
VECTOR_MODE (COMPLEX_INT, CHI, 2); /* V2CSI */
VECTOR_MODE (COMPLEX_INT, CHI, 4); /* V4CSI */
VECTOR_MODE (COMPLEX_INT, CSI, 2); /* V2CSI */

VECTOR_MODE (COMPLEX_FLOAT, SC, 2);/* V2SC */

VECTOR_MODE (INT, DI, 1);          /* V1DI == V64 */
VECTOR_MODE (INT, DI, 2);          /* V2DI == V128 */
VECTOR_MODE (INT, DI, 4);          /* V4DI == V256 */
VECTOR_MODE (INT, DI, 8);          /* V8DI == V512 */

VECTOR_MODE (INT, OI, 1);          /* V1OI == X256 */
VECTOR_MODE (INT, OI, 2);          /* V2OI == X512 */
VECTOR_MODE (INT, OI, 4);          /* V4OI == X1024 */
VECTOR_MODE (INT, OI, 8);          /* V8OI == X2048 */
VECTOR_MODE (INT, OI, 16);         /* V16OI == X4096 */
VECTOR_MODE (INT, OI, 32);         /* V32OI == X8192 */

#define MAX_BITSIZE_MODE_ANY_INT (256)

