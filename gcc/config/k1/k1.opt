HeaderInclude
config/k1/k1-opts.h

ffixed-reg
Target RejectNegative Report Joined Var(k1_deferred_options) Defer
Set the passed register range as fixed

march=
Target RejectNegative Joined Report Enum(k1_arch_type) Var(k1_arch_name) Init(K1_ARCH_C)
-march=ARCHITECTURE  Compile for specified ARCHITECTURE

Enum
Name(k1_arch_type) Type(enum k1_arch_type)
Known K1 architecture types (for use with the -march option):

EnumValue
Enum(k1_arch_type) String(k1c) Value(K1_ARCH_C)

mreload
Target RejectNegative Report Mask(RELOAD)
Use the deprecated reload pass to fixup the register allocation

mfarcall
Target Report Var(K1_FARCALL)
Avoid all range limits on call instructions

mforce-uncached-lsu
Target Report Var(K1_FORCE_UNCACHED_LSU)
Force the use of uncached instructions for all memory accesses. 

mcore=k1c
Target RejectNegative Report Mask(K1C)
Compile for K1C ISA

m32
Target Report Mask(32)
Use 32 bits pointers.

mgprel
Target Report Mask(GPREL)
Enable use of Global Pointer relative data

mlocal-sdata
Target Report Var(TARGET_LOCAL_SDATA) Init(0)
Enable use of small data for local objects

fbundling
Target Report Mask(BUNDLING)
Enable bundling when optimizing (active by default)

fhwloop
Target Report Mask(HWLOOP)
Enable hwloop generation when optimizing (active by default)

fstrict-align
Target Report Mask(STRICT_ALIGN)
Do not generate misaligned memory accesses 

fstack-check-use-tls
Target RejectNegative Report Mask(STACK_CHECK_USE_TLS)
Use a TLS slot named __stack_end to store the stack boundary instead of $sr1

mabi=
Target RejectNegative Joined Enum(k1_abi) Var(k1_abi) Init(K1_ABI_DEFAULT)
-mabi=ABI	Generate code that conforms to the specified ABI

Enum
Name(k1_abi) Type(int)
Known K1 MPPA ABIs (for use with the -mabi= option):

Waddress-space-conversion
C C++ Warning Var(K1_WARN_ADDRESS_SPACE_CONVERSION) Init(0)
Warn if an __uncached pointer is converted to a general one or vice versa

EnumValue
Enum(k1_abi) String(lp64) Value(K1_ABI_LP64)

