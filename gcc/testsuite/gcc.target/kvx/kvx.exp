# Copyright (C) 1997, 2004, 2006, 2007 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# GCC testsuite that uses the `dg.exp' driver.

# Exit immediately if this isn't a kvx target.
if ![istarget kvx-*-*] then {
  return
}

# Load support procs.
load_lib gcc-dg.exp

# If a testcase doesn't have special options, use these.
global DEFAULT_CFLAGS
if ![info exists DEFAULT_CFLAGS] then {
    set DEFAULT_CFLAGS " -ansi -pedantic-errors"
}

# Initialize `dg'.
dg-init

# Main loop.
dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\[cCS\]]] \
 	"" $DEFAULT_CFLAGS

proc test-shorten-branch { } {
  set test_name "shorten_banches"
  set outfile [open "$test_name.c" w+]

  puts $outfile "\
/* { dg-do assemble } */
/* { dg-options \"-O0 -fstack-limit-register=sr\" } */
#define N 10
int main ()
\{
  int sum = 0;
  int a\[N\];"


  for {set i 0} {$i < 150000} {incr i} {
    set idx {$i % 10}
    puts $outfile "  a\[$i\] = $i;"
  }

  puts $outfile "\
   for (int i = 0; i < N; ++i)
     sum += a\[i\];

   return sum;
 \}"
   close $outfile
   dg-runtest "$test_name.c" "" ""
   file delete {*}[glob $test_name.*]
}

# This tests takes something around 20 seconds to compile because it needs to
# generate a gigantic assembly file.
if [istarget kvx*-cos*] then {
  test-shorten-branch
}

# All done.
dg-finish
